# X1 is the code base for the breach of contract app
# used in 2021 Semester 1 (and maybe subsequent semesters
# and other courses) as an assessable task
#
# This code contains part of the breach of contract app.
# The code is an example to illustrate to students:
# - complex programming
# - use of if statements
# - multiple files
#
# Students are set
# completion of this code (ie: the 'Somebody didn't pay
# me for work' branch) as an exercise.
#
# Students should
# - test for the elements of contract according to contract law
# - do so in easy to read language with a Fleish score of > 60
---
# This is a complex program.  We therefore split the code out 
# into multiple files (see the B1.01 video for more info)
include:
  - X1.01.questions.yml
  - X1.01.endpoints.yml
---
# We start off with a 'Welcome screen'.  Students should 
# replace the boilerplate text with a meaningful explanation
#
# Note this question block is mandatory.  Good practice with
# Docassemble is to have a few mandatory blocks as possible.  
# Ideally, there should never be more than two - a welcome 
# screen and a code block to drive the app.
mandatory: True
question: Breach of Contract App
subquestion: |
  Welcome to the Breach of Contract App!
  This app will step you through the formation of a case for a breach of contract, and will advise if you have any basis to sue.
  
  ***Disclaimer:
  This app is not a substitute for professional legal advice. 
  You should consult a licensed lawyer before taking legal action.***
buttons:
  - I agree and wish to continue: continue
  - I do not agree and wish to exit: exit
---
# This code block controls the execution of the app.
# The code block asks the work and payment questions
# and then takes the user to the final screen.  You will
# see that the final screen contains the logic that drives
# most of the 'legal' part of the app ie: the code that
# determines whether the user can sue or not.
mandatory: True
code: |
  # Ask the initial questions
  MJFsue_reason
  # We need to split off here depending on what the user
  # answered
  if MJFsue_reason == 'MJFpromisor':
    
    # set the text of each question block for the left side of the flowchart
    MJFwork_requested_text = 'Describe the work you did'
    MJFpayment_agreed_text = 'How much did you agree to be paid for this work?'
    MJFcertainty_text = 'Did you agree to do this work?'
    MJFagree_exact_text = 'Yes. I agreed to do exactly this work'
    MJFagree_inexact_text = 'Yes. I agreed to do some of this work, but there was other work that was not agreed to that I did'
    MJFdisagree_text = 'No. I did not agree to do this work or all of this work'
    MJFconsideration_text = 'Did you and the other person agree how much you would be paid for the work'
  
  elif MJFsue_reason == 'MJFpromisee':
  
    # set the text of each question block for the right side of the flowchart
    MJFwork_requested_text = 'Describe the work you wanted done'
    MJFpayment_agreed_text = 'How much did you agree to pay for this work?'
    MJFcertainty_text = 'Did the other person agree to do this work?'
    MJFagree_exact_text = 'Yes. The other person agreed to do exactly this work'
    MJFagree_inexact_text = 'Yes. The other person agreed to do some of this work, but there was other work that was not agreed to that wasn\'t done'
    MJFdisagree_text = 'No. The other person did not agree to do this work or all of this work'
    MJFconsideration_text = 'Did you and the other person agree how much you would pay for the work?'
    
  else:
    # We should never end up at this else statement as MJFsue_reason
    # should only ever be one of the two values above.  But if we've
    # made a typo or some other error, then this else part will be
    # triggered.  That's useful to us as as it will explain what's
    # gone wrong if we have made a typo or other error.  It'd be
    # much harder to find otherwise.

    error_message = 'Unknown value in MJFsue_reason: {}'.format(MJFsue_reason)
    endpoints['error_screen']
    
    
  # First we ask the prelimiary questions
  MJFwork_requested
  MJFpayment_agreed
  
  # Now we can implement contract law as code.  Contract law
  # states that we can only have a contract if we have
  # Offer and Acceptance AND consideration AND Agreement AND Capacity
  # All four elements must be present in order for a contract to exist.
  # Conversely, if any of the four is not present then there is not
  # a contract.  
  MJFcontract_exists = (MJFcertainty == 'MJFagree_exact') and (MJFconsideration) and (MJFcapacity)

  # Now we know whether there is a contract or not we can display
  # the final screen that contains a result and an explanation of why
  endpoints['final_screen']
---